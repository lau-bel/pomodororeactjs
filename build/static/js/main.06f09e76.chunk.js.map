{"version":3,"sources":["HELL-POMODORO.png","logo.js","buttonPlus.js","ButtonMinus.js","startbutton.js","react-sound.js","timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","src","ImageLogo","alt","Component","ButtonPlus","props","class","onClick","ButtonMinus","StartButton","content","Alert","lib_default","url","playStatus","Sound","status","PLAYING","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","AddMinutes","bind","assertThisInitialized","DeleteMinutes","DecreasedOn","tick","mySound","React","createRef","state","minutes","seconds","running","currentTime","text","setState","min","Math","floor","secondsRemaining","sec","clearInterval","intervalHandle","setInterval","time","react_sound_Alert","_this2","buttonPlus","startbutton","src_ButtonMinus","App","logo","timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4OCgBzBC,yLATX,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAME,IAAMC,IAAWC,IAAI,wBAJhBC,qBCuBJC,MAxBf,SAAoBC,GAChB,OAEIT,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cAEjBH,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,OAEVC,QAASF,EAAME,SAFnB,OCmBOC,MAxBf,SAAqBH,GACjB,OAEIT,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eAEjBH,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,QAEZC,QAASF,EAAME,SAFjB,OCiBOE,MAtBf,SAAsBJ,GAElB,OAEET,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAEjBH,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,QAEZC,QAASF,EAAME,SAIVF,EAAMK,2BCbEC,mLAGpB,OACEf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,IAAI,oBACJC,WAAYC,IAAMC,OAAOC,iBANOd,aCmKpBe,cA1Jb,SAAAA,EAAYb,GAAM,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACCqB,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACrBA,EAAKW,YAAcX,EAAKW,YAAYH,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKY,KAAOZ,EAAKY,KAAKJ,KAAVP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACZA,EAAKa,QAAUC,IAAMC,YACrBf,EAAKgB,MAAQ,CACXC,QAAU,GACVC,QAAU,KACVC,SAAU,EACVC,YAAa,GACbC,KAAO,SAZKrB,4EAoBJG,KAAKa,MAAMC,SAEV,IACPd,KAAKmB,SAAS,CACdL,QAAUd,KAAKa,MAAMC,QAAS,4CAO1Bd,KAAKa,MAAMC,QACX,GACVd,KAAKmB,SAAS,CAEZL,QAAUd,KAAKa,MAAMC,QAAS,mCAShC,IAAIM,EAAMC,KAAKC,MAAMtB,KAAKuB,iBAAmB,IACzCC,EAAMxB,KAAKuB,iBAA0B,GAANH,EAErCpB,KAAKmB,SAAS,CACZL,QAASM,EACTL,QAASS,IAGPA,EAAM,IACRxB,KAAKmB,SAAS,CACZJ,QAAS,IAAMf,KAAKa,MAAME,UAI1BK,EAAM,IAERpB,KAAKmB,SAAS,CACZL,QAAS,IAAMd,KAAKa,MAAMC,UAMlB,IAARM,EAAoB,IAARI,GACZC,cAAczB,KAAK0B,gBAInB1B,KAAKuB,yDAQP,GAAIvB,KAAKa,MAAMG,QAsBbS,cAAczB,KAAK0B,gBACjB1B,KAAKmB,SAAS,CACZH,SAAS,EACTF,QAASd,KAAKa,MAAMI,YACpBF,QAAS,KACTG,KAAM,gBA3BW,CACrBlB,KAAKmB,SAAS,CACZH,SAAS,EACTC,YAAajB,KAAKa,MAAMC,QACxBI,KAAM,UAGJlB,KAAK0B,eAAiBC,YAAY3B,KAAKS,KAAM,KAE7C,IAAImB,EAAO5B,KAAKa,MAAMC,QAEtBd,KAAKuB,iBAA0B,GAAPK,EAEpB5B,KAAKa,MAAMC,QAAU,IAEvBd,KAAKmB,SAAS,CACZL,QAAU,IAAMd,KAAKa,MAAMC,UAmBnC,GAAW,GAFCd,KAAKa,MAAMC,QAED,GADVd,KAAKuB,iBAEf,OACEjD,EAAAC,EAAAC,cAACqD,EAAD,uCASC,IAAAC,EAAA9B,KACP,OACG1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQO,MAAM,SAE1BV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,SACXV,EAAAC,EAAAC,cAAA,aAAKwB,KAAKa,MAAMC,QAAhB,MAA4Bd,KAAKa,MAAME,SAEvCzC,EAAAC,EAAAC,cAAA,OAAKQ,MAAQ,WACbV,EAAAC,EAAAC,cAACuD,EAAD,CACI9C,QAAU,kBAAI6C,EAAK1B,gBAGtB9B,EAAAC,EAAAC,cAACwD,EAAD,CACK/C,QAAS,kBAAI6C,EAAKtB,eAClBpB,QAASY,KAAKa,MAAMK,OAG1B5C,EAAAC,EAAAC,cAACyD,EAAD,CACEhD,QAAU,kBAAI6C,EAAKvB,6BAlJX1B,aCaLqD,mLAfX,OAEE5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdH,EAAAC,EAAAC,cAAC2D,EAAD,MACA7D,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAC4D,EAAD,cATWvD,aCMEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06f09e76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HELL-POMODORO.4229c1c6.png\";","import React, { Component } from 'react';\nimport ImageLogo from './HELL-POMODORO.png';\n\nimport './App.css';\n\nclass Logo extends Component {\n  render() {\n    return (\n       <div className=\"Logo\">\n        <img  src= {ImageLogo} alt=\"logo tomato\"/>\n      </div>\n\n    );\n  }\n}\n\nexport default Logo;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nfunction ButtonPlus(props){\n    return (\n\n        <div className = \"ButtonPlus\">\n\n        <button class=\"plus\"\n\n            onClick={props.onClick}\n\n          >\n\n        +\n\n        </button>\n\n        </div>\n\n\n    )\n\n    }\n\n\n\nexport default ButtonPlus;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nfunction ButtonMinus(props){\n    return (\n\n        <div className = \"ButtonMinus\">\n\n        <button class=\"minus\"\n\n          onClick={props.onClick}\n        >\n\n        -\n\n        </button>\n\n        </div>\n\n\n    )\n\n    }\n\n\n\n\nexport default ButtonMinus;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nfunction StartButton (props) {\n\n    return (\n\n      <div className = \"Start\">\n\n      <button class=\"start\"\n\n        onClick={props.onClick}\n\n        >\n\n            {props.content}\n\n      </button>\n\n      </div>\n    );\n  }\n\n\n\nexport default StartButton;\n","import React, { Component } from 'react';\nimport Sound from 'react-sound'\n\nexport default class Alert extends Component {\n\nrender() {\n return (\n   <Sound\n   url='./Hallow_Wind.mp3'\n   playStatus={Sound.status.PLAYING}\n  \n   />\n  );\n }\n}\n","import React, { Component } from 'react';\nimport ButtonPlus from './buttonPlus.js';\nimport ButtonMinus from './ButtonMinus.js';\nimport StartButton from './startbutton.js';\nimport Sound from './react-sound.js';\n\n\n\nimport './App.css';\n\nclass Timer extends Component {\n\n  constructor(props){\n    super(props);\n      this.AddMinutes = this.AddMinutes.bind(this);\n      this.DeleteMinutes = this.DeleteMinutes.bind(this);\n      this.DecreasedOn = this.DecreasedOn.bind(this);\n      this.tick = this.tick.bind(this);\n      this.mySound = React.createRef();\n      this.state = {\n        minutes : 20,\n        seconds : 0 + \"0\",\n        running : false,\n        currentTime: \"\",\n        text : \"Start\"\n      }\n\n  }\n\n\n  AddMinutes(){\n\n      var min = this.state.minutes\n\n      if (min <= 59){\n          this.setState({\n          minutes: (this.state.minutes +1),\n\n    })\n  }\n}\n\n  DeleteMinutes(){\n    var min = this.state.minutes\n    if (min > 0){\n    this.setState({\n\n      minutes: (this.state.minutes -1),\n\n    })\n  }\n\n  }\n\n  tick() {\n\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - (min * 60);\n\n  this.setState({\n    minutes: min,\n    seconds: sec\n  })\n\n  if (sec < 10) {\n    this.setState({\n      seconds: \"0\" + this.state.seconds,\n    })\n  }\n\n  if (min < 10) {\n\n    this.setState({\n      minutes: \"0\" + this.state.minutes,\n    })\n\n  }\n\n\n  if (min === 0 & sec === 0) {\n      clearInterval(this.intervalHandle);\n\n  }\n\n      this.secondsRemaining--\n\n  }\n\n\n  DecreasedOn(){\n\n\n    if(!this.state.running){\n      this.setState({\n        running: true,\n        currentTime: this.state.minutes,\n        text: \"Reset\"\n      })\n\n          this.intervalHandle = setInterval(this.tick, 1000);\n\n          let time = this.state.minutes;\n\n          this.secondsRemaining = time * 60;\n\n          if (this.state.minutes < 10){\n\n            this.setState({\n              minutes : \"0\" + this.state.minutes,\n            })\n          }\n    }\n\n    else{\n      clearInterval(this.intervalHandle);\n        this.setState({\n          running: false,\n          minutes: this.state.currentTime,\n          seconds: 0 + \"0\",\n          text: \"Restart\"\n\n       })\n\n      }\n\n      const min = this.state.minutes;\n      const sec = this.secondsRemaining;\n      if (min == 0 & sec == 0) {\n        return(\n          <Sound />\n        );\n      }\n\n\n\n\n}\n\n  render() {\n    return (\n       <div className=\"Timer\" class=\"timer\">\n\n          <div class=\"clock\">\n          <p> {this.state.minutes} : {this.state.seconds}</p>\n\n          <div class = \"buttons\">\n          <ButtonPlus\n              onClick ={()=>this.AddMinutes()}\n           />\n\n           <StartButton\n                onClick={()=>this.DecreasedOn()}\n                content={this.state.text}\n            />\n\n          <ButtonMinus\n            onClick ={()=>this.DeleteMinutes()} />\n            </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport Logo from './logo.js';\nimport Timer from './timer.js';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n\n      <div className=\"App\">\n\n       <Logo />\n       <h1>Work or die.</h1>\n\n       <Timer />\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Logo from './logo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}